# -*- coding: utf-8 -*-
"""NB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_N7Qv0n73Z7cqfx-FaqhwBKhNddS_u2s
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix
from sklearn.naive_bayes import GaussianNB
import warnings
warnings.filterwarnings('ignore')

from google.colab import files
uploaded=files.upload()

sdtrain=pd.read_csv("SalaryData_Train.csv")

sdtrain.head()

"""EDA and Data Visualisation for Train dataset

"""

sdtrain.Salary.value_counts()

sdtrain.describe()

sdtrain.corr()

sdtrain.info()

sdtrain.workclass.value_counts()

sdtrain.education.value_counts()

import seaborn as sns
cols = sdtrain.columns 
colours = ['blue', 'yellow'] # specify the colours - yellow is missing. blue is not missing.
sns.heatmap(sdtrain[cols].isnull(),
            cmap=sns.color_palette(colours))

plt.figure(figsize=(18,10))
plt.hist(sdtrain.education);

sdtrain_label=sdtrain.copy()

from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()

sdtrain_label.iloc[:, -1] = le.fit_transform(sdtrain_label.iloc[:,-1])

sdtrain_label.Salary.value_counts()

sdtrain_label.iloc[:, 1] = le.fit_transform(sdtrain_label.iloc[:,1])
sdtrain_label.iloc[:, 2] = le.fit_transform(sdtrain_label.iloc[:,2])
sdtrain_label.iloc[:, 4] = le.fit_transform(sdtrain_label.iloc[:,4])
sdtrain_label.iloc[:, 5] = le.fit_transform(sdtrain_label.iloc[:,5])
sdtrain_label.iloc[:, 6] = le.fit_transform(sdtrain_label.iloc[:,6])
sdtrain_label.iloc[:, 7] = le.fit_transform(sdtrain_label.iloc[:,7])
sdtrain_label.iloc[:, 8] = le.fit_transform(sdtrain_label.iloc[:,8])
sdtrain_label.iloc[:, 12] = le.fit_transform(sdtrain_label.iloc[:,12])

sdtrain_label

sdtrain_label.workclass.value_counts()

sdtrain_label.education.value_counts()

sdtrain_label.maritalstatus.value_counts()

sdtrain_label.occupation.value_counts()

sdtrain_label.relationship.value_counts()

sdtrain_label.sex.value_counts()

sdtrain_label.native.value_counts()

x_train=sdtrain_label.iloc[:,:-1]
y_train=sdtrain_label.iloc[:,-1]

x_train

y_train

"""Now we import SalaryData_Test dataset"""

from google.colab import files
uploaded=files.upload()

sdtest=pd.read_csv("SalaryData_Test.csv")

sdtest.head()

"""EDA and Data Visualisation for Test dataset"""

sdtest.shape

sdtest.Salary.value_counts()

sdtest.describe()

sdtest.corr()

import seaborn as sns
cols = sdtest.columns 
colours = ['blue', 'yellow'] # specify the colours - yellow is missing. blue is not missing.
sns.heatmap(sdtest[cols].isnull(),
            cmap=sns.color_palette(colours))

plt.figure(figsize=(18,10))
plt.hist(sdtest.education);

sdtest_label=sdtest.copy()

sdtest_label

sdtest_label.iloc[:, -1] = le.fit_transform(sdtest_label.iloc[:,-1])
sdtest_label.iloc[:, 1] = le.fit_transform(sdtest_label.iloc[:,1])
sdtest_label.iloc[:, 2] = le.fit_transform(sdtest_label.iloc[:,2])
sdtest_label.iloc[:, 4] = le.fit_transform(sdtest_label.iloc[:,4])
sdtest_label.iloc[:, 5] = le.fit_transform(sdtest_label.iloc[:,5])
sdtest_label.iloc[:, 6] = le.fit_transform(sdtest_label.iloc[:,6])
sdtest_label.iloc[:, 7] = le.fit_transform(sdtest_label.iloc[:,7])
sdtest_label.iloc[:, 8] = le.fit_transform(sdtest_label.iloc[:,8])
sdtest_label.iloc[:, 12] = le.fit_transform(sdtest_label.iloc[:,12])

sdtest_label

x_test=sdtest_label.iloc[:,:-1]
y_test=sdtest_label.iloc[:,-1]

x_test

y_test



"""Preparing Guassian naive bayes model for both Train dataset & Test


> Indented block


"""

# training the model on training set
from sklearn.metrics import confusion_matrix
from sklearn.naive_bayes import GaussianNB
gnb = GaussianNB()
gnb.fit(x_train, y_train)

y_pred_train = gnb.predict(x_train)
y_pred_train

from sklearn import metrics
print("Gaussian Naive Bayes model accuracy(in %):", metrics.accuracy_score(y_train, y_pred_train))
print("Gaussian Naive Bayes model accuracy(in %):", metrics.accuracy_score(y_train, y_pred_train)*100)

cm=confusion_matrix(y_train, y_pred_train)
cm

y_pred_test = gnb.predict(x_test)
y_pred_test

print("Gaussian Naive Bayes model accuracy(in %):", metrics.accuracy_score(y_test, y_pred_test)*100)

cm=confusion_matrix(y_test, y_pred_test)
cm

